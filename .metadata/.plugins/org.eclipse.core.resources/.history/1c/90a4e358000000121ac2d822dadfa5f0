import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeSet;


public class Main {
	public static void main(String ... args){
		String dir = null;
		if(args.length==0)
			dir = "txt";
		 dir= args[0];
		 
	}
	
	public static HashMap<String, TreeSet<Integer>> buildInvertIndex(String dir){
		HashMap<String,TreeSet<Integer>> res = new HashMap<String, TreeSet<Integer>>();
		ArrayList<String> files = getTxtFilesFromDir(dir);
		for( int i=0;i<files.size();i++){
			String file = files.get(i);
			FileReader fin = null;
			try{
			 fin= new FileReader(new File(dir,file));
			 proccessFile(fin,res,Integer.valueOf(i));
			}
			catch(Exception e){
				e.printStackTrace();
			}finally{
				if(fin!=null)
					try {
						fin.close();
					} catch (IOException e) {						
						e.printStackTrace();
					}
			}
		}
		return res;
	}
	
	private static void proccessFile(FileReader fin,
			HashMap<String, TreeSet<Integer>> res, Integer fileNum) throws IOException {
		BufferedReader breader = new BufferedReader(fin);
		String line;
		while((line=breader.readLine())!=null){
			String[] words = line.split("\\W");
			for(String word:words){
				word = normalizeWord(word);
				if(!res.containsKey(word))
					res.put(word, new TreeSet<Integer>());
				TreeSet<Integer> invList = res.get(word);
				invList.add(fileNum);
			}
		}				
	}

	public static ArrayList<String> getTxtFilesFromDir(String dir){
		File dirFile = new File(dir);
		ArrayList<String> res = new ArrayList<String>();
		FilenameFilter filter = new FilenameFilter() {			
			@Override
			public boolean accept(File dir, String name) {
				if(name.endsWith(".txt"))
				return true;
				else return false;
			}
		};
		if(dirFile.isDirectory())
		for(File f:dirFile.listFiles(filter)){
			res.add(f.getName());
		}
		return res;
	}
	
	public static void insertWordsIntoSetFromFile(BufferedReader fileReader,TreeSet<String> words){
		BufferedReader breader = new BufferedReader(fin);
		String line;
		while((line=breader.readLine())!=null){
			String[] words = line.split("\\W");
			for(String word:words){
				word = normalizeWord(word);
				if(!res.containsKey(word))
					res.put(word, new TreeSet<Integer>());
				TreeSet<Integer> invList = res.get(word);
				invList.add(fileNum);
			}
		}			
	}
	
	public static String normalizeWord(String word){
		return word.toLowerCase();
	}
}
